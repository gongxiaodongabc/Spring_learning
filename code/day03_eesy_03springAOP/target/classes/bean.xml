<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
        <!--配置spring的IOC，把service对象配置进来-->
        <bean id="accountService" class="com.qmh.service.impl.AccountServiceImpl"></bean>
        <!--spring中基于xml的AOP配置步骤
            1.把通知bean交给spring来管理
            2.使用aop:config标签表面开始AOP配置
            3.使用aop:aspect标签表明配置切面
                id属性给切面提供唯一标识
                ref属性：指定通知类bean的Id
             4.在aop:aspect标签内部使用对应的标签来配置通知类型
                    现在的示例中printLog方法在切入点方法执行之前执行，前置通知 aop:before
                    pointcut属性 用于指定切人点表达式，该表达式的含义是指对业务层中哪些方法进行增强

                切入点表达式的写法：
                    关键字 execution(表达式)
                    表达式：
                        访问修饰符  返回值  包名.包名....类名.方法名（参数列表）
                     标准的表达式写法：
                        public void com.qmh.service.impl.AccountServiceImpl.saveAccount()
                      访问修饰符可以省略 public
                      返回值可以使用通配符表示任意返回值 void
                      包名可以使用通配符表示任意包，但有几级包，就需要写几个*
                        包名可以使用*..表示当前包及其子包 com.qmh.service.impl
                      类名和方法名都可以使用*实现通配
                      参数列表：
                            可以直接写数据类型
                                基本类型写名称
                                引用类型写包名.类名的方式  java.lang.String
                             可以使用通配符表示任意类型，但必须有参数
                             可以使用..表示有无参数均可，有参数可以是任意类型
                     全通配写法:
                        * *..*.*(..)
                     实际开发中切入点表达式的通常写法：
                        切到业务层实现类下的所有方法
                            * com.qmh.service.impl.*.*(..)
        -->
        <!--配置Logger类-->
        <bean id="logger" class="com.qmh.utils.Logger"></bean>
        <!--配置AOP-->
        <aop:config>
            <!--配置切面-->
            <aop:aspect id="logAdvice" ref="logger">
                <!--配置通知的类型并建立通知方法和切入点方法的关联-->
                <aop:before method="printLog" pointcut="execution( * com.qmh.service.impl.*.*(..))"></aop:before>
            </aop:aspect>
        </aop:config>


</beans>