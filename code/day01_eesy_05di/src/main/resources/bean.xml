<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
        <!--spring中的依赖注入
            依赖注入：
                Dependency Injection
             IOC作用：
                降低程序间的耦合
             依赖关系的管理：
                以后都交给spring来维护
              在当前类中需要用到其他类的对象，由spring提供，只需要在配置文件中说明
              依赖关系的维护：
                称为依赖注入
               依赖注入：
                能注入的类型有三类：
                    基本类型和String
                    其他bean类型（在配置文件中或者注解配置过的bean)
                    复杂类型/集合类型
                 注入的方式有三种：
                    1.使用构造函数提供
                    2.使用set方法提供
                    3.使用注解提供
        -->

        <!--构造函数注入
            使用标签： constructor-arg
            标签中的属性:
                type 用于指定要注入数据的数据类型，该数据类型也是构造函数中参数的类型
                index 用于指定要注入的数据给构造函数中指定索引位置的参数赋值
                name 用于指定给构造函数中指定名称的参数赋值
                ==============用于指定给构造函数中哪个参数赋值=========================
                value 用于提供基本类型和String类型的数据
                ref 用于指定其他的bean类型数据，指的是在spring的IOC核心容器中出现过的bean对象
             优势：
                在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
              弊端：
                改变了bean对象的实例化方式，使得在创建对象时，如果用不到这些数据，也必须提供
        -->
        <bean id="accountService" class="com.qmh.service.impl.AccountServiceImpl">
            <constructor-arg name="name" value="test" ></constructor-arg>
            <constructor-arg name="age" value="18"></constructor-arg>
            <constructor-arg name="birthday" ref="now"></constructor-arg>

        </bean>
        <!--配置一个日期对象  通过反射构造日期对象，存放于spring容器中，并由id取得对象-->
        <bean id="now" class="java.util.Date"></bean>

        <!--Set方法注入
            使用标签： property
            标签中的属性：
                name 用于指定注入时所调用的set方法名称
                value 用于提供基本类型和String类型的数据
                ref 用于指定其他的bean类型数据，指的是在spring的IOC核心容器中出现过的bean对象
             优势：
                创建对象时没有明确限制，可以直接使用默认构造函数
              弊端：
                如果某个成员必须有值，则set方法无法保证一定注入
        -->
        <bean id="accountService2" class="com.qmh.service.impl.AccountServiceImpl2">
            <property name="name" value="Test"></property>
            <property name="age" value="21"></property>
            <property name="birthday" ref="now"></property>
        </bean>
        <!--复杂类型的注入/集合类型注入
            用于给List结构注入的标签：
                list array set
             用于给Map结构集合注入的标签：
                map,props
              结构相同，标签可以互换
           -->
        <bean id="accountService3" class="com.qmh.service.impl.AccountServiceImpl3">
            <property name="myStrs">
                <set>
                    <value>AAA</value>
                    <value>BBB</value>
                    <value>CCC</value>
                </set>
            </property>

            <property name="myList">
                <array>
                    <value>AAA</value>
                    <value>BBB</value>
                    <value>CCC</value>
                </array>
            </property>

            <property name="mySet">
                <list>
                    <value>AAA</value>
                    <value>BBB</value>
                    <value>CCC</value>
                </list>
            </property>

            <property name="myMap">
                <props>
                    <prop key="testC">ccc</prop>
                    <prop key="testD">ddd</prop>
                </props>
            </property>

            <property name="myProps">
                <map>
                    <entry key="testA" value="aaa"></entry>
                    <entry key="testB">
                        <value>BBB</value>
                    </entry>
                </map>

            </property>

        </bean>
</beans>